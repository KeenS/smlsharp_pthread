(* 
#include<pthread.h>
*)

(* ====END_OF_HEADER==== *)
structure PThreadCompat = struct
    datatype dummy = $ of int

    (* 
ifdef linux
    *)
    (* detach state *)
    val $PTHREAD_CREATE_JOINABLE = $0
    val $PTHREAD_CREATE_DETACHED = $1

    (* mutex types *)
    val $PTHREAD_MUTEX_NORMAL      = $0
    val $PTHREAD_MUTEX_RECURSIVE   = $1
    val $PTHREAD_MUTEX_ERRORCHECK  = $2
    val $PTHREAD_MUTEX_DEFAULT     = $PTHREAD_MUTEX_NORMAL

    (*
#if defined __USE_POSIX199506 || defined __USE_UNIX98
    *)
    (* mutex protocol *)
    val $PTHREAD_PRIO_NONE    = $0
    val $PTHREAD_PRIO_INHERIT = $1
    val $PTHREAD_PRIO_PROTECT = $2
(*
#endif
*)


    (* 
#if defined __USE_UNIX98 || defined __USE_XOPEN2K       
    *)
    (* read write lock types *)
    val $PTHREAD_RWLOCK_PREFER_READER_NP              = $0
    val $PTHREAD_RWLOCK_PREFER_WRITER_NP              = $1
    val $PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = $2
    val $PTHREAD_RWLOCK_DEFAULT_NP                    = $3
    (* 
#endif
    *)


    (* scheduler inheritance *)
    val $PTHREAD_INHERIT_SCHED  = $0
    val $PTHREAD_EXPLICIT_SCHED = $1

    (* scope handling *)
    val $PTHREAD_SCOPE_SYSTEM  = $0
    val $PTHREAD_SCOPE_PROCESS = $1

    (* process shared or private flag *)
    val $PTHREAD_PROCESS_PRIVATE = $0
    val $PTHREAD_PROCESS_SHARED  = $1

    (* cancellation *)
    val $PTHREAD_CANCEL_ENABLE = $0
    val $PTHREAD_CANCEL_DISABLE = $1
    val $PTHREAD_CANCEL_DEFERRED = $0
    val $PTHREAD_CANCEL_ASYNCHRONOUS = $1

    (* $PTHREAD_CANCELED is defined ((void * ) -1). it is not portable to SML#... *)

    val $PTHREAD_ONCE_INIT = $0
    (* 
#ifdef __USE_XOPEN2K
    *)
    val $PTHREAD_BARRIER_SERIAL_THREAD = $(~1)
    (* 
#endif
    *)

    val $SIZEOF_PTHREAD_ATTR_T = $ __SIZEOF_PTHREAD_ATTR_T
    val $SIZEOF_PTHREAD_MUTEX_T = $ __SIZEOF_PTHREAD_MUTEX_T
    val $SIZEOF_PTHREAD_MUTEXATTR_T = $ __SIZEOF_PTHREAD_MUTEXATTR_T
    val $SIZEOF_PTHREAD_COND_T = $ __SIZEOF_PTHREAD_COND_T
    val $SIZEOF_PTHREAD_CONDATTR_T = $ __SIZEOF_PTHREAD_CONDATTR_T
    val $SIZEOF_PTHREAD_RWLOCK_T = $ __SIZEOF_PTHREAD_RWLOCK_T
    val $SIZEOF_PTHREAD_RWLOCKATTR_T = $ __SIZEOF_PTHREAD_RWLOCKATTR_T
    val $SIZEOF_PTHREAD_BARRIER_T = $ __SIZEOF_PTHREAD_BARRIER_T
    val $SIZEOF_PTHREAD_BARRIERATTR_T = $ __SIZEOF_PTHREAD_BARRIERATTR_T

    (* typedef unsigned long int pthread_t; *)
    type pthread_t = int
    fun pthread_new () = 0


     (*
union pthread_attr_t
{
  char __size[__SIZEOF_PTHREAD_ATTR_T];
  long int __align;
};
     *)
      (* typedef union pthread_attr_t pthread_attr_t; *)
      type pthread_attr_t = word8 array
      fun pthread_attr_new () = Word8Array.array (SIZEOF_PTHREAD_ATTR_T, 0w0)

     (*
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;
#ifdef __x86_64__
    unsigned int __nusers;
#endif
    /* KIND must stay at this position in the structure to maintain
       binary compatibility.  */
    int __kind;
#ifdef __x86_64__
    short __spins;
    short __elision;
    __pthread_list_t __list;
# define __PTHREAD_MUTEX_HAVE_PREV	1
/* Mutex __spins initializer used by PTHREAD_MUTEX_INITIALIZER.  */
# define __PTHREAD_SPINS             0, 0
#else
    unsigned int __nusers;
    __extension__ union
    {
      struct
      {
	short __espins;
	short __elision;
# define __spins __elision_data.__espins
# define __elision __elision_data.__elision
# define __PTHREAD_SPINS         { 0, 0 }
      } __elision_data;
      __pthread_slist_t __list;
    };
#endif
  } __data;
  char __size[__SIZEOF_PTHREAD_MUTEX_T];
  long int __align;
} pthread_mutex_t;
     *)
      type pthread_mutex_t = word8 array
      fun pthread_mutex_new () = Word8Array.array (SIZEOF_PTHREAD_MUTEX_T, 0w0)

     (* 
typedef union
{
  char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];
  int __align;
} pthread_mutexattr_t;
     *)
      type pthread_mutexattr_t = word8 array
      fun pthread_mutexattr_new () = Word8Array.array (SIZEOF_PTHREAD_MUTEXATTR_T, 0w0)

     (*
typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[__SIZEOF_PTHREAD_COND_T];
  __extension__ long long int __align;
} pthread_cond_t;
     *)
      type pthread_cond_t = word8 array
      fun pthread_cond_new () = Word8Array.array (SIZEOF_PTHREAD_COND_T, 0w0)

      (*
typedef union
{
  char __size[__SIZEOF_PTHREAD_CONDATTR_T];
  int __align;
} pthread_condattr_t;
      *)
      type pthread_condattr_t = word8 array
      fun pthread_condattr_new () = Word8Array.array (SIZEOF_PTHREAD_CONDATTR_T, 0w0)

      (* typedef unsigned int pthread_key_t; *)
      type pthread_key_t = word
      fun pthread_key_new () = 0w0

      (* typedef int pthread_once_t; *)
      type pthread_once_t = int
      fun pthread_once_new () = 0
      (* 
endif
      *)

      end
