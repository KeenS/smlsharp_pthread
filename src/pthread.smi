_require "./pthread_compat.smi"

structure PThread = struct
    (* detach state *)
    val PTHREAD_CREATE_JOINABLE: int
    val PTHREAD_CREATE_DETACHED: int

    (* mutex types *)
    val PTHREAD_MUTEX_NORMAL   : int
    val PTHREAD_MUTEX_RECURSIVE: int
    val PTHREAD_MUTEX_ERRORCHECK: int
    val PTHREAD_MUTEX_DEFAULT   : int

    (* scheduler inheritance *)
    val PTHREAD_INHERIT_SCHED  : int
    val PTHREAD_EXPLICIT_SCHED : int

    (* scope handling *)
    val PTHREAD_SCOPE_SYSTEM  : int
    val PTHREAD_SCOPE_PROCESS : int

    (* process shared or private flag *)
    val PTHREAD_PROCESS_PRIVATE : int
    val PTHREAD_PROCESS_SHARED  : int

    (* cancellation *)
    val PTHREAD_CANCEL_ENABLE : int
    val PTHREAD_CANCEL_DISABLE : int
    val PTHREAD_CANCEL_DEFERRED : int
    val PTHREAD_CANCEL_ASYNCHRONOUS : int

    (* PTHREAD_CANCELED is defined ((void * ) -1). it is not portable to SML#... *)

    val PTHREAD_ONCE_INIT : int


    type pthread_t = PThreadCompat.pthread_t
    type pthread_attr_t = PThreadCompat.pthread_attr_t
    type pthread_mutex_t = PThreadCompat.pthread_mutex_t
    type pthread_mutexattr_t = PThreadCompat.pthread_mutexattr_t
    type pthread_cond_t = PThreadCompat.pthread_cond_t
    type pthread_condattr_t = PThreadCompat.pthread_condattr_t
    type pthread_key_t = PThreadCompat.pthread_key_t
    type pthread_once_t = PThreadCompat.pthread_once_t
    val pthread_new: unit -> pthread_t
    val pthread_attr_new: unit -> pthread_attr_t
    val pthread_mutex_new: unit -> pthread_mutex_t
    val pthread_mutexattr_new: unit -> pthread_mutexattr_t
    val pthread_cond_new: unit -> pthread_mutex_t
    val pthread_condattr_new: unit -> pthread_mutexattr_t
    val pthread_key_new: unit -> pthread_key_t
    val pthread_once_new: unit -> pthread_once_t


    val pthread_create: pthread_t ref * pthread_attr_t ref * (unit ptr -> unit ptr) * unit ptr -> int
    val pthread_exit: unit ptr -> unit
    val pthread_self: unit -> pthread_t
    val pthread_equal: pthread_t * pthread_t -> int
    val pthread_join: pthread_t * unit ptr ref -> int
    val pthread_detach: pthread_t -> int

    val pthread_attr_destroy: pthread_attr_t ref -> int
    val pthread_attr_getdetachstate: pthread_attr_t ref * int -> int       
    val pthread_attr_getguardsize: pthread_attr_t ref *  word ref -> int
    val pthread_attr_getinheritsched: pthread_attr_t ref * int ref -> int
    (* val pthread_attr_getschedparam: pthread_attr_t ref *  -> int *)
    val pthread_attr_getschedpolicy: pthread_attr_t ref * int ref -> int
    val pthread_attr_getscope: pthread_attr_t ref * int ref -> int
    val pthread_attr_getstack: pthread_attr_t * unit ptr ref * word ref -> int
    val pthread_attr_getstackaddr: pthread_attr_t * unit ptr ref -> int
    val pthread_attr_getstacksize: pthread_attr_t * word ref -> int
    val pthread_attr_init: pthread_attr_t ref -> int
    val pthread_attr_setdetachstate: pthread_attr_t ref * int -> int
    val pthread_attr_setguardsize: pthread_attr_t ref * word -> int
    val pthread_attr_setinheritsched: pthread_attr_t ref * int -> int
    (* val pthread_attr_setschedparam: pthread_attr_t ref *  -> int *)
    val pthread_attr_setschedpolicy: pthread_attr_t ref * int -> int
    val pthread_attr_setscope: pthread_attr_t ref * int -> int
    val pthread_attr_setstack: pthread_attr_t ref * unit ptr * word -> int
    val pthread_attr_setstackaddr: pthread_attr_t ref * unit ptr -> int
    val pthread_attr_setstacksize: pthread_attr_t ref * word -> int

    val pthread_mutex_lock: pthread_mutex_t ref -> int
    val pthread_mutex_unlock: pthread_mutex_t ref -> int
    val pthread_mutex_init: pthread_mutex_t ref * pthread_mutexattr_t ref -> int
    val pthread_mutex_destroy: pthread_mutex_t ref -> int
    val pthread_mutex_getprioceiling: pthread_mutex_t ref * int ref -> int
    val pthread_mutex_setprioceiling: pthread_mutex_t ref * int * int ref -> int

    val pthread_mutexattr_destroy: pthread_mutexattr_t ref -> int
    val pthread_mutexattr_getprioceiling: pthread_mutexattr_t ref * int ref -> int
    val pthread_mutexattr_getprotocol: pthread_mutexattr_t ref * int ref -> int
    val pthread_mutexattr_getpshared: pthread_mutexattr_t ref * int ref -> int
    val pthread_mutexattr_gettype:pthread_mutexattr_t ref * int ref -> int
    val pthread_mutexattr_init: pthread_mutexattr_t ref -> int
    val pthread_mutexattr_setprioceiling: pthread_mutexattr_t ref * int -> int
    val pthread_mutexattr_setprotocol: pthread_mutexattr_t ref * int -> int
    val pthread_mutexattr_setpshared: pthread_mutexattr_t ref * int -> int
    val pthread_mutexattr_settype: pthread_mutex_t ref * int -> int

    val pthread_cond_signal: pthread_cond_t ref -> int
    val pthread_cond_broadcast: pthread_cond_t ref -> int
    val pthread_cond_wait: pthread_cond_t ref * pthread_mutex_t ref -> int
    val pthread_cond_destroy: pthread_cond_t ref -> int
    val pthread_cond_init: pthread_cond_t ref * pthread_condattr_t ref -> int

    val pthread_condattr_destroy = _import "pthread_condattr_destroy": pthread_condattr_t ref -> int
    (* val pthread_condattr_getclock = _import "pthread_condattr_getclock": pthread_condattr_t ref * -> int *)
    val pthread_condattr_getpshared = _import "pthread_condattr_getpshared": pthread_condattr_t ref * int ref -> int
    val pthread_condattr_init = _import "pthread_condattr_init": pthread_condattr_t ref -> int
    (* val pthread_condattr_setclock = _import "pthread_condattr_setclock": pthread_condattr_t ref *  -> int *)
    val pthread_condattr_setpshared = _import "pthread_condattr_setpshared": pthread_condattr_t ref * int -> int


    val pthread_once: pthread_once_t ref * (unit -> unit) -> int
    val pthread_key_create: pthread_key_t ref * (unit ptr -> unit) -> int
    val pthread_key_delete: pthread_key_t -> int
    val pthread_getspecific: pthread_key_t -> unit ptr
    val pthread_setspecific: pthread_key_t * unit ptr -> int
    val pthread_cancel: pthread_t -> int
    val pthread_setcancelstate: int * int ref -> int
    val pthread_setcanceltype: int * int ref -> int
    val pthread_testcancel: unit -> unit
    (* val pthread_cleanup_push:  (unit ptr -> unit) * unit ptr -> unit *)
    (* val pthread_cleanup_pop:  int -> unit *)

end
